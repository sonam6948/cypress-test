"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// plugin/index.ts
var plugin_exports = {};
__export(plugin_exports, {
  cloudPlugin: () => cloudPlugin,
  default: () => plugin_default
});
module.exports = __toCommonJS(plugin_exports);
var import_fs = __toESM(require("fs"));
var import_util = require("util");
var import_ws = __toESM(require("ws"));
async function cloudPlugin(on, config) {
  function debug(...args) {
    if (config.env.currents_debug_enabled) {
      console.debug("[currents:plugin]", (0, import_util.format)(...args));
    }
  }
  let ws = null;
  function sendToWS(message) {
    if (ws) {
      ws.send(JSON.stringify(message));
    }
  }
  if (config.env.currents_ws) {
    debug("setting port to %s", config.env.currents_ws);
    await new Promise((resolve) => {
      ws = new import_ws.default(`ws://localhost:${config.env.currents_ws}`);
      ws.on("open", () => {
        resolve(null);
      });
    });
  }
  debug("currents plugin loaded");
  if (config.env.currents_temp_file) {
    debug("dumping config to '%s'", config.env.currents_temp_file);
    import_fs.default.writeFileSync(config.env.currents_temp_file, JSON.stringify(config));
    debug("config is availabe at '%s'", config.env.currents_temp_file);
  }
  on("before:spec", (spec) => {
    sendToWS({ type: "before:spec", payload: { spec } });
  });
  on("after:spec", (spec, results) => {
    sendToWS({ type: "after:spec", payload: { spec, results } });
  });
  return config;
}
var plugin_default = cloudPlugin;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  cloudPlugin
});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vcGx1Z2luL2luZGV4LnRzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyIvLy8gPHJlZmVyZW5jZSB0eXBlcz1cIkN5cHJlc3NcIiAvPlxuXG5pbXBvcnQgZnMgZnJvbSBcImZzXCI7XG5pbXBvcnQgeyBmb3JtYXQgfSBmcm9tIFwidXRpbFwiO1xuaW1wb3J0IFdlYlNvY2tldCBmcm9tIFwid3NcIjtcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGNsb3VkUGx1Z2luKFxuICBvbjogQ3lwcmVzcy5QbHVnaW5FdmVudHMsXG4gIGNvbmZpZzogQ3lwcmVzcy5QbHVnaW5Db25maWdPcHRpb25zXG4pIHtcbiAgZnVuY3Rpb24gZGVidWcoLi4uYXJnczogdW5rbm93bltdKSB7XG4gICAgaWYgKGNvbmZpZy5lbnYuY3VycmVudHNfZGVidWdfZW5hYmxlZCkge1xuICAgICAgY29uc29sZS5kZWJ1ZyhcIltjdXJyZW50czpwbHVnaW5dXCIsIGZvcm1hdCguLi5hcmdzKSk7XG4gICAgfVxuICB9XG5cbiAgbGV0IHdzOiBXZWJTb2NrZXQgfCBudWxsID0gbnVsbDtcbiAgZnVuY3Rpb24gc2VuZFRvV1MobWVzc2FnZTogdW5rbm93bikge1xuICAgIGlmICh3cykge1xuICAgICAgd3Muc2VuZChKU09OLnN0cmluZ2lmeShtZXNzYWdlKSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGNvbmZpZy5lbnYuY3VycmVudHNfd3MpIHtcbiAgICBkZWJ1ZyhcInNldHRpbmcgcG9ydCB0byAlc1wiLCBjb25maWcuZW52LmN1cnJlbnRzX3dzKTtcbiAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgd3MgPSBuZXcgV2ViU29ja2V0KGB3czovL2xvY2FsaG9zdDoke2NvbmZpZy5lbnYuY3VycmVudHNfd3N9YCk7XG4gICAgICB3cy5vbihcIm9wZW5cIiwgKCkgPT4ge1xuICAgICAgICByZXNvbHZlKG51bGwpO1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBkZWJ1ZyhcImN1cnJlbnRzIHBsdWdpbiBsb2FkZWRcIik7XG5cbiAgaWYgKGNvbmZpZy5lbnYuY3VycmVudHNfdGVtcF9maWxlKSB7XG4gICAgZGVidWcoXCJkdW1waW5nIGNvbmZpZyB0byAnJXMnXCIsIGNvbmZpZy5lbnYuY3VycmVudHNfdGVtcF9maWxlKTtcbiAgICBmcy53cml0ZUZpbGVTeW5jKGNvbmZpZy5lbnYuY3VycmVudHNfdGVtcF9maWxlLCBKU09OLnN0cmluZ2lmeShjb25maWcpKTtcbiAgICBkZWJ1ZyhcImNvbmZpZyBpcyBhdmFpbGFiZSBhdCAnJXMnXCIsIGNvbmZpZy5lbnYuY3VycmVudHNfdGVtcF9maWxlKTtcbiAgfVxuXG4gIG9uKFwiYmVmb3JlOnNwZWNcIiwgKHNwZWMpID0+IHtcbiAgICBzZW5kVG9XUyh7IHR5cGU6IFwiYmVmb3JlOnNwZWNcIiwgcGF5bG9hZDogeyBzcGVjIH0gfSk7XG4gIH0pO1xuICBvbihcImFmdGVyOnNwZWNcIiwgKHNwZWMsIHJlc3VsdHMpID0+IHtcbiAgICBzZW5kVG9XUyh7IHR5cGU6IFwiYWZ0ZXI6c3BlY1wiLCBwYXlsb2FkOiB7IHNwZWMsIHJlc3VsdHMgfSB9KTtcbiAgfSk7XG5cbiAgcmV0dXJuIGNvbmZpZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xvdWRQbHVnaW47XG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFFQSxnQkFBZTtBQUNmLGtCQUF1QjtBQUN2QixnQkFBc0I7QUFFdEIsZUFBc0IsWUFDcEIsSUFDQSxRQUNBO0FBQ0EsV0FBUyxTQUFTLE1BQWlCO0FBQ2pDLFFBQUksT0FBTyxJQUFJLHdCQUF3QjtBQUNyQyxjQUFRLE1BQU0seUJBQXFCLG9CQUFPLEdBQUcsSUFBSSxDQUFDO0FBQUEsSUFDcEQ7QUFBQSxFQUNGO0FBRUEsTUFBSSxLQUF1QjtBQUMzQixXQUFTLFNBQVMsU0FBa0I7QUFDbEMsUUFBSSxJQUFJO0FBQ04sU0FBRyxLQUFLLEtBQUssVUFBVSxPQUFPLENBQUM7QUFBQSxJQUNqQztBQUFBLEVBQ0Y7QUFFQSxNQUFJLE9BQU8sSUFBSSxhQUFhO0FBQzFCLFVBQU0sc0JBQXNCLE9BQU8sSUFBSSxXQUFXO0FBQ2xELFVBQU0sSUFBSSxRQUFRLENBQUMsWUFBWTtBQUM3QixXQUFLLElBQUksVUFBQUEsUUFBVSxrQkFBa0IsT0FBTyxJQUFJLGFBQWE7QUFDN0QsU0FBRyxHQUFHLFFBQVEsTUFBTTtBQUNsQixnQkFBUSxJQUFJO0FBQUEsTUFDZCxDQUFDO0FBQUEsSUFDSCxDQUFDO0FBQUEsRUFDSDtBQUVBLFFBQU0sd0JBQXdCO0FBRTlCLE1BQUksT0FBTyxJQUFJLG9CQUFvQjtBQUNqQyxVQUFNLDBCQUEwQixPQUFPLElBQUksa0JBQWtCO0FBQzdELGNBQUFDLFFBQUcsY0FBYyxPQUFPLElBQUksb0JBQW9CLEtBQUssVUFBVSxNQUFNLENBQUM7QUFDdEUsVUFBTSw4QkFBOEIsT0FBTyxJQUFJLGtCQUFrQjtBQUFBLEVBQ25FO0FBRUEsS0FBRyxlQUFlLENBQUMsU0FBUztBQUMxQixhQUFTLEVBQUUsTUFBTSxlQUFlLFNBQVMsRUFBRSxLQUFLLEVBQUUsQ0FBQztBQUFBLEVBQ3JELENBQUM7QUFDRCxLQUFHLGNBQWMsQ0FBQyxNQUFNLFlBQVk7QUFDbEMsYUFBUyxFQUFFLE1BQU0sY0FBYyxTQUFTLEVBQUUsTUFBTSxRQUFRLEVBQUUsQ0FBQztBQUFBLEVBQzdELENBQUM7QUFFRCxTQUFPO0FBQ1Q7QUFFQSxJQUFPLGlCQUFROyIsCiAgIm5hbWVzIjogWyJXZWJTb2NrZXQiLCAiZnMiXQp9Cg==