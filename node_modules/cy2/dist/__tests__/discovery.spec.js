"use strict";
var _fs = _interopRequireDefault(require("fs"));
var _discovery = require("../discovery");
var _discoveryStateModule = require("../discovery-state-module");
var _discoveryCli = require("../discovery-cli");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
        var info = gen[key](arg);
        var value = info.value;
    } catch (error) {
        reject(error);
        return;
    }
    if (info.done) {
        resolve(value);
    } else {
        Promise.resolve(value).then(_next, _throw);
    }
}
function _asyncToGenerator(fn) {
    return function() {
        var self = this, args = arguments;
        return new Promise(function(resolve, reject) {
            var gen = fn.apply(self, args);
            function _next(value) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
            }
            function _throw(err) {
                asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
            }
            _next(undefined);
        });
    };
}
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
jest.mock('../discovery-state-module');
jest.mock('../discovery-cli');
test('should use explicit path', _asyncToGenerator(function*() {
    _fs.default.statSync = jest.fn().mockReturnValue(true);
    const result = yield (0, _discovery).getConfigFilesPaths('explicitPath/app.yml');
    expect(result.configFilePath).toMatch('explicitPath/app.yml');
    expect(result.backupConfigFilePath).toMatch('explicitPath/_app.yml');
    expect(_fs.default.statSync).toHaveBeenCalledWith(expect.stringMatching('explicitPath'));
}));
test('should use state-module', _asyncToGenerator(function*() {
    _discoveryStateModule.getConfigFilesPaths_stateModule.mockReturnValue({
    });
    yield (0, _discovery).getConfigFilesPaths();
    expect(_discoveryStateModule.getConfigFilesPaths_stateModule).toHaveBeenCalled();
}));
test('should use getConfigFilesPaths_cli', _asyncToGenerator(function*() {
    _discoveryStateModule.getConfigFilesPaths_stateModule.mockRejectedValueOnce(new Error('oh!'));
    yield (0, _discovery).getConfigFilesPaths();
    expect(_discoveryStateModule.getConfigFilesPaths_stateModule).toHaveBeenCalled();
    expect(_discoveryCli.getConfigFilesPaths_cli).toHaveBeenCalled();
}));
