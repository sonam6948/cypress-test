"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.hasInjected = hasInjected;
exports.instrumentCypressInit = exports.generateJS = exports.parseJS = exports.FN_ID = void 0;
var _acorn = require("acorn");
var _escodegen = _interopRequireDefault(require("escodegen"));
var _estraverse = _interopRequireDefault(require("estraverse"));
var _path = require("./path");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const parseJS = (code)=>(0, _acorn).parse(code, {
        ecmaVersion: 2020
    })
;
exports.parseJS = parseJS;
const generateJS = (ast)=>_escodegen.default.generate(ast)
;
exports.generateJS = generateJS;
const FN_ID = 'cy2_injected';
exports.FN_ID = FN_ID;
const instrumentCypressInit = (code, injectedModulePath, entryPointPath, backupPath)=>{
    const normalizedPath = (0, _path).normalizePath(injectedModulePath);
    const injectedFn = `
function ${FN_ID}() {
    try { require('${normalizedPath}')("${entryPointPath}", "${backupPath}"); }
    catch (e) {
      console.error(e);
    }
}`;
    const injectedCode = `(${injectedFn})();`;
    const ast = parseJS(code);
    if (!hasInjected(ast)) {
        return generateJS(injectAST(ast, parseJS(injectedCode)));
    }
    return generateJS(replaceAST(ast, parseJS(injectedFn)));
};
exports.instrumentCypressInit = instrumentCypressInit;
function hasInjected(ast) {
    let found = false;
    _estraverse.default.traverse(ast, {
        enter: function(node) {
            if (node.type == _estraverse.default.Syntax.Identifier && node.name === FN_ID) {
                found = true;
                return this.break();
            }
        }
    });
    return found;
}
function injectAST(ast, injectedAst) {
    _estraverse.default.traverse(ast, {
        enter: function(node) {
            if (node.type === _estraverse.default.Syntax.Program) {
                node.body.unshift(injectedAst.body[0]);
                return this.break();
            }
        }
    });
    return ast;
}
function replaceAST(ast, injectedFnAst) {
    return _estraverse.default.replace(ast, {
        enter: function(node) {
            var ref;
            if (node.type == _estraverse.default.Syntax.FunctionExpression && ((ref = node.id) === null || ref === void 0 ? void 0 : ref.name) === FN_ID) {
                return injectedFnAst.body[0];
            }
        }
    });
}
